// Generated by CoffeeScript 1.6.2
(function() {
  var ListSorter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ListSorter = (function() {
    function ListSorter(container, views) {
      this.container = container;
      this.views = views;
      this.onDragStart = __bind(this.onDragStart, this);
      this.deactivate = __bind(this.deactivate, this);
      this.activate = __bind(this.activate, this);
      this.enableHoldListner();
    }

    ListSorter.prototype.enableHoldListner = function() {
      return this.container.hammer().on("hold", "li", this.activate);
    };

    ListSorter.prototype.disableHoldListner = function() {
      return this.container.hammer().off("hold", this.activate);
    };

    ListSorter.prototype.activate = function(e) {
      this.disableHoldListner();
      this.createDraggables();
      if (e) {
        return this.forceStartDrag(e);
      }
    };

    ListSorter.prototype.forceStartDrag = function(e) {
      var draggable;

      draggable = this.getDraggableFromId(e.currentTarget.getAttribute("data-id"));
      return draggable.startDrag(e.gesture.srcEvent);
    };

    ListSorter.prototype.getDraggableFromId = function(id) {
      var d, _i, _len, _ref;

      _ref = this.draggables;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        if (d._eventTarget.getAttribute("data-id") === id) {
          return d;
          break;
        }
      }
    };

    ListSorter.prototype.deactivate = function(removeCSS) {
      if (removeCSS == null) {
        removeCSS = false;
      }
      this.killDraggables(removeCSS);
      return this.enableHoldListner();
    };

    ListSorter.prototype.createDraggables = function() {
      var dragOpts, draggable, self, view, _i, _len, _ref, _results;

      if (this.draggables != null) {
        this.killDraggables();
      }
      self = this;
      this.draggables = [];
      _ref = this.views;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        view = _ref[_i];
        dragOpts = {
          type: "y",
          bounds: this.container,
          onDragStartParams: [view],
          onDragStart: this.onDragStart,
          onDragEndScope: this,
          onDragEndParams: [view],
          onDragEnd: this.onDragEnd
        };
        draggable = new Draggable(view, dragOpts);
        _results.push(this.draggables.push(draggable));
      }
      return _results;
    };

    ListSorter.prototype.onDragStart = function(view) {
      return $(view).addClass("dragging");
    };

    ListSorter.prototype.onDragEnd = function(view) {
      $(view).removeClass("dragging");
      return this.deactivate();
    };

    ListSorter.prototype.killDraggables = function(removeCSS) {
      var draggable, _i, _len, _ref;

      if (this.draggables != null) {
        _ref = this.draggables;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          draggable = _ref[_i];
          draggable.disable();
        }
      }
      if (removeCSS) {
        return this.removeInlineStyles();
      }
    };

    ListSorter.prototype.removeInlineStyles = function() {
      var view, _i, _len, _ref, _results;

      _ref = this.views;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        view = _ref[_i];
        _results.push($(view).removeAttr("style"));
      }
      return _results;
    };

    ListSorter.prototype.destroy = function() {
      this.deactivate(true);
      return this.disableHoldListner();
    };

    return ListSorter;

  })();

  window.ListSorter = ListSorter;

}).call(this);
